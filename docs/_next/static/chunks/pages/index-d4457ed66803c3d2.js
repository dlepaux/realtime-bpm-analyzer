(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[405],{5557:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/",function(){return t(3486)}])},6308:function(e,n,t){"use strict";t.d(n,{Do:function(){return r},WV:function(){return i},kq:function(){return a},pM:function(){return l},vb:function(){return o},w9:function(){return s}});var a=function(){return new(window.AudioContext||window.mozAudioContext||window.webkitAudioContext)},i="".concat("/realtime-bpm-analyzer","/media/new_order-blue_monday.mp3"),r="npm install realtime-bpm-analyzer",s='<audio src="'.concat("/realtime-bpm-analyzer",'/media/new_order-blue_monday.mp3" id="music"></audio>'),o="import { createRealTimeBpmProcessor } from 'realtime-bpm-analyzer';\n\nconst realtimeAnalyzerNode = await createRealTimeBpmProcessor(audioContext);\n\n// Set the source with the HTML Audio Node\nconst track = document.getElementById('track');\nconst source = audioContext.createMediaElementSource(track);\n\n// Lowpass filter\nconst filter = audioContext.createBiquadFilter();\nfilter.type = 'lowpass';\n\n// Connect stuff together\nsource.connect(filter).connect(realtimeAnalyzerNode);\nsource.connect(audioContext.destination);\n\nrealtimeAnalyzerNode.port.onmessage = (event) => {\n  if (event.data.message === 'BPM') {\n    console.log('BPM', event.data.result);\n  }\n  if (event.data.message === 'BPM_STABLE') {\n    console.log('BPM_STABLE', event.data.result);\n  }\n};\n",l="// For NextJS see your next.config.js and add this:\n// You also need to install 'npm install copy-webpack-plugin@6.4.1 -D'\n// Note that the latest version (11.0.0) didn't worked properly with NextJS 12\nconst path = require('path');\nconst CopyPlugin = require('copy-webpack-plugin');\nmodule.exports = {\nwebpack: config => {\n    config.plugins.push(\n      new CopyPlugin({\n        patterns: [\n          {\n            from: './node_modules/realtime-bpm-analyzer/dist/realtime-bpm-processor.js',\n            to: path.resolve(__dirname, 'public'),\n          },\n        ],\n      },\n      ));\n\n    return config;\n  },\n};\n"},3486:function(e,n,t){"use strict";t.r(n);var a=t(5893),i=t(9008),r=t.n(i),s=t(1664),o=t.n(s),l=(t(7294),t(3951)),c=t(682),d=t(6308);n.default=function(){return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(r(),{children:[(0,a.jsx)("title",{children:"Realtime Bpm Analyzer"}),(0,a.jsx)("meta",{name:"description",content:"Example using the Realtime BPM Analyzer on an audio node."})]}),(0,a.jsxs)(c.Z,{className:"pb-3",children:[(0,a.jsx)("p",{className:"text-center",children:(0,a.jsx)("img",{src:"".concat("/realtime-bpm-analyzer","/img/allegro-project.png"),className:"img-fluid"})}),(0,a.jsx)("h2",{children:"Installation"}),(0,a.jsx)(l.default,{language:"bash",className:"bash",children:d.Do}),(0,a.jsx)("h2",{children:"Usage"}),(0,a.jsxs)("div",{children:[(0,a.jsx)("p",{children:"1. An AudioNode to analyze. So something like this :"}),(0,a.jsx)(l.default,{language:"xml",className:"ms-3 xml",children:d.w9}),(0,a.jsx)("p",{children:"2. Create the AudioWorkletProcessor with `createRealTimeBpmProcessor`, create and pipe the lowpass filter to the AudioWorkletNode (`realtimeAnalyzerNode`)."}),(0,a.jsx)(l.default,{language:"js",className:"ms-3 javascript",children:d.vb}),(0,a.jsx)("p",{children:"3. You also need to expose the file `dist/realtime-bpm-processor.js` (already bundled) to your public root diretory. Typically, this file must be available at http://yourdomain/realtime-bpm-processor.js."}),(0,a.jsx)(l.default,{language:"js",className:"ms-3 javascript",children:d.pM})]}),(0,a.jsx)("h2",{className:"mt-3",children:"Examples"}),(0,a.jsxs)("div",{children:["Please check the examples in this website and the ",(0,a.jsx)(o(),{href:"/how-it-works",children:(0,a.jsx)("a",{children:"How it works"})})," page.",(0,a.jsx)("br",{}),"You can as well check ",(0,a.jsx)("a",{href:"https://github.com/dlepaux/realtime-bpm-analyzer/tree/main/src/views/routes",children:"the code base"})," of the github pages to see how to use the library for those specific cases."]}),(0,a.jsx)("h2",{className:"mt-3",children:"Contribution, Community & Support"}),(0,a.jsxs)("p",{children:["Please ensure to aknowledge the ",(0,a.jsx)("a",{href:"https://github.com/dlepaux/realtime-bpm-analyzer/tree/main/contributing.md",children:"contribution guide lines"})," and ",(0,a.jsx)("a",{href:"https://github.com/dlepaux/realtime-bpm-analyzer/tree/main/code-of-conduct.md",children:"code of conduct"}),"."]}),(0,a.jsxs)("p",{children:["Once you've read the document mentioned above, don't hesitate to ",(0,a.jsx)("a",{href:"https://gitter.im/realtime-bpm-analyzer/Lobby",children:"chat with the community"})," or ",(0,a.jsx)("a",{href:"https://github.com/dlepaux/realtime-bpm-analyzer/issues",children:"submit an issue"}),"."]}),(0,a.jsx)("h2",{className:"mt-3",children:"Changelog"}),(0,a.jsxs)("p",{children:["See the ",(0,a.jsx)("a",{href:"https://github.com/dlepaux/realtime-bpm-analyzer/tree/main/changelog.md",children:"changelog"}),"."]}),(0,a.jsx)("h2",{className:"mt-3",children:"Licence"}),(0,a.jsxs)("p",{children:["This project is under ",(0,a.jsx)("a",{href:"https://github.com/dlepaux/realtime-bpm-analyzer/tree/main/licence.md",children:"MIT licence"}),"."]}),(0,a.jsx)("h2",{className:"mt-3",children:"Credits"}),(0,a.jsxs)("p",{children:["This library was been inspired from ",(0,a.jsx)("a",{href:"https://github.com/tornqvist/bpm-detective",children:"Tornqvist"})," project which also based on ",(0,a.jsx)("a",{href:"http://joesul.li/van/beat-detection-using-web-audio/",children:"Joe Sullivan's algorithm"}),". Thank you to both of them."]}),(0,a.jsx)("h2",{className:"mt-3",children:"Final"}),(0,a.jsxs)("p",{children:["If this helped you in any way, you can always leave me a tip here :)",(0,a.jsx)("br",{}),"BTC ",(0,a.jsx)("strong",{children:"36eHnxCRUDfWNFEx3YebRGw12WeutjkBBt"}),(0,a.jsx)("br",{}),"ETH ",(0,a.jsx)("strong",{children:"0x0F8b4F026624150e9F6267bFD93C372eb98e3010"})]})]})]})}}},function(e){e.O(0,[616,774,888,179],(function(){return n=5557,e(e.s=n);var n}));var n=e.O();_N_E=n}]);